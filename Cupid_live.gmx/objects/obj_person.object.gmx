<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>arrow = 0;
colour = BLUE;
interest = choose(BATTLEAXES, BEER, BOARDGAMES, CARS, CATS, COFFEE, DIAMONDS, ICECREAM, MOVIES, MUSIC, SEX, SHOES, SPORTS, VIDEOGAMES);
match = 0;
matching = false;
sex = choose(FEMALE, MALE);
type = choose(BUSINESS, EIGHTIES, FITNESS, GOTH, PUNK, VICTORIAN, VIKING, YETI);

if (type == BUSINESS)
{
    colour = choose(BLUE, RED);

    if (colour == BLUE)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_business_female_blue;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_business_male_blue;
        }
    }

    if (colour == RED)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_business_female_red;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_business_male_red;
        }
    }
}
else if (type == EIGHTIES)
{
    colour = choose(PINK, YELLOW);

    if (colour == PINK)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_80s_female_pink;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_80s_male_pink;
        }
    }
    else if (colour == YELLOW)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_80s_female_yellow;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_80s_male_yellow;
        }
    }
}
else if (type == FITNESS)
{
    colour = choose(PINK, RED, WHITE, YELLOW);

    if (colour == PINK)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_fitness_female_pink;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_fitness_male_pink;
        }
    }
    if (colour == RED)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_fitness_female_red;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_fitness_male_red;
        }
    }
    if (colour == WHITE)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_fitness_female_white;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_fitness_male_white;
        }
    }
    if (colour == YELLOW)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_fitness_female_yellow;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_fitness_male_yellow;
        }
    }
}
else if (type == GOTH)
{
    colour = choose(BLUE, PINK);

    if (colour == BLUE)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_goth_female_blue;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_goth_male_blue;
        }
    }
    else if (colour == PINK)
    {
        if (sex == FEMALE)
        {
            sprite_index = spr_goth_female_pink;
        }
        else if (sex == MALE)
        {
            sprite_index = spr_goth_male_pink;
        }
    }
}
else if (type == PUNK)
{
    if (sex == FEMALE)
    {
        sprite_index = spr_punk_female;
    }
    else if (sex == MALE)
    {
        sprite_index = spr_punk_male;
    }
}
else if (type == VICTORIAN)
{
    if (sex == FEMALE)
    {
        sprite_index = spr_victorian_female;
    }
    else if (sex == MALE)
    {
        sprite_index = spr_victorian_male;
    }
}
else if (type == VIKING)
{
    if (sex == FEMALE)
    {
        sprite_index = spr_viking_female;
    }
    else if (sex == MALE)
    {
        sprite_index = spr_viking_male;
    }
}
else if (type == YETI)
{
    if (sex == FEMALE)
    {
        sprite_index = spr_yeti_female;
    }
    else if (sex == MALE)
    {
        sprite_index = spr_yeti_male;
    }
}

image_xscale = 1.35;
image_yscale = 1.35;

path_start(choose(path1, path2, path3, path4, path5, path6, path7, path8), 5, 1, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>arrow</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (arrow)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = room_height - y;

if (arrow != 0)
{
    arrow.depth = depth - 0.5;
}

if (matching)
{
    image_xscale -= 0.1;
    image_yscale -= 0.1;
}

if (image_xscale &lt;= 0)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_person">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (match == 0)
{
    return 0;
}
if (other.id != match.id)
{
    return 0;
}

ds_list_delete(global.lovers, ds_list_find_index(global.lovers, id));
with (arrow)
{
    instance_destroy();
}

ds_list_delete(global.lovers, ds_list_find_index(global.lovers, other.id));
with (other.arrow)
{
    instance_destroy();
}

matching = true;
other.matching = true;

global.last_match_debug_info = "Match: ";
global.total_matches++;

var matched_aspects = 0;
if (interest == other.interest)
{
    matched_aspects++;
    global.desire_matches++;
    global.last_match_debug_info += " Interests!";
}
if (colour == other.colour)
{
    matched_aspects++;
    global.color_matches++;
    global.last_match_debug_info += " Color!";
}
if (type == other.type)
{
    matched_aspects++;
    global.culture_matches++;
    global.last_match_debug_info += " Type!";
}

var perfect = false;
if (colour == other.colour &amp;&amp;
    interest == other.interest &amp;&amp;
    type == other.type)
{
    perfect = true;
    global.perfect_matches++;
}
if (sex == other.sex)
{
    global.same_sex_matches++;
}
if ((type == YETI &amp;&amp; other.type != YETI) ||
    (type != YETI &amp;&amp; other.type == YETI))
{
    global.inter_species_matches++;
}

global.persons_matched += 2;
var base_score = 1;
if (matched_aspects == 0)
{
    score += base_score;
}
else if (matched_aspects == 1)
{
    score += base_score * 2;
}
else if (matched_aspects == 2)
{
    score += base_score * 4;
}
else if (matched_aspects == 3)
{
    score += base_score * 8;
}

if (perfect)
{
    scr_emit_confetti(x, y - EMIT_OFFSET);
    scr_emit_confetti(other.x, other.y - EMIT_OFFSET);
}

scr_emit_hearts(x, y - EMIT_OFFSET);
scr_emit_hearts(other.x, other.y - EMIT_OFFSET);

match = 0;
other.match = 0;

instance_create(min(x, other.x) + abs(x - other.x), min(y, other.y) + abs(y - other.y), obj_bush);

if (type == YETI || other.type == YETI)
{
    sound_play(snd_sex_yeti);
}
else
{
    audio_play_sound(choose(snd_sex1, snd_sex2, snd_sex3, snd_sex4, snd_sex5, snd_sex6, snd_sex7), 3, false);
}
audio_play_sound(snd_sex_bush_rustle, 4, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.thought_bubble_person</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>self.id</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>tl_thought_bubble_delay</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
